import requests
import json
import os
from dotenv import load_dotenv
import streamlit as st

# Configuration de la page
st.set_page_config(
    page_title="Assistant d'Orientation - Chatbot",
    page_icon="logo_Orisup.jpg",
    layout="centered",
)
# Ajouter le logo en haut de la page
st.image("logo_Orisup.jpg", width=150, caption="Orisup")


# Chargement de la cl√© API depuis un fichier .env
load_dotenv()
api_key = os.getenv("API_KEY")

# URL de l'API
url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key={api_key}"

# Lecture des donn√©es des universit√©s
db = ""
with open("data_university.txt", "r") as file:
    university_data = file.read()

db += university_data

with open("ISTA_maroc.txt", "r") as file:
    ista_data = file.read()

db += ista_data

# Ajouter un style personnalis√© pour l'arri√®re-plan
st.markdown(
    """
    <style>
    body {
        background: linear-gradient(135deg, orange, blue);
        color: white;
        font-family: Arial, sans-serif;
    }
    div.stButton > button {
        background-color: #00008B;
        color: white;
        border-radius: 5px;
    }
    div.stTextInput > div > input {
        border: 2px solid #0056b3;
        border-radius: 5px;
    }
    </style>
    """,
    unsafe_allow_html=True,
)

# Titre de l'application
st.title("üí¨ Chatbot - Assistant d'Orientation Universitaire")

# Conteneur de discussion
if "messages" not in st.session_state:
    st.session_state.messages = [
        {"role": "bot", "content": "Bienvenue ! Posez-moi votre question ou demandez des conseils d'orientation universitaire üòä."}
    ]

# Fonction pour afficher les messages
def afficher_messages():
    for message in st.session_state.messages:
        if message["role"] == "user":
            st.markdown(f"<div style='text-align: right; color: white; background-color: #0056b3; padding: 10px; border-radius: 10px; margin-bottom: 10px;'>{message['content']}</div>", unsafe_allow_html=True)
        else:
            st.markdown(f"<div style='text-align: left; color: white; background-color: #ff6600; padding: 10px; border-radius: 10px; margin-bottom: 10px;'>{message['content']}</div>", unsafe_allow_html=True)

# Affichage des messages existants
afficher_messages()

# Entr√©e utilisateur
user_input = st.text_input("Votre message :", key="user_input")

# Si l'utilisateur envoie un message
if st.button("Envoyer"):
    if user_input.strip():
        # Ajouter le message utilisateur √† la discussion
        st.session_state.messages.append({"role": "user", "content": user_input})

        # Construire le prompt pour l'API
        prompt = [
            {
                "text": """message system: Tu es OriSup assistant sp√©cialis√© en orientation universitaire pour le r√©seau des universit√©s marocaines. 
                Utilise les donn√©es disponibles et propose des suggestions pr√©cises et adapt√©es, avec un ton chaleureux et engageant. tu parles fran√ßais, anglais, arabe et darija marocain."""
            },
            {
                "text": f"prompt: {user_input}\nDonn√©es sur les universit√©s: {db}"
            }
        ]

        # Pr√©parer la requ√™te pour l'API
        payload = json.dumps({
            "contents": [{"parts": prompt}],
            "generation_config": {"temperature": 0.5}
        })
        headers = {"Content-Type": "application/json"}

        # Envoyer la requ√™te √† l'API
        response = requests.post(url, headers=headers, data=payload)

        if response.status_code == 200:
            result = response.json()
            response_text = result["candidates"][0]["content"]["parts"][0]["text"]

            # Ajouter la r√©ponse du chatbot √† la discussion
            st.session_state.messages.append({"role": "bot", "content": response_text})
        else:
            st.session_state.messages.append(
                {"role": "bot", "content": "D√©sol√©, je ne peux pas r√©pondre pour le moment. Veuillez r√©essayer plus tard."}
            )

     

